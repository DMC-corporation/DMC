<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DMCCategorieBundleEntityArticleProxy extends \DMC\CategorieBundle\Entity\Article implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setNom($nom)
    {
        $this->__load();
        return parent::setNom($nom);
    }

    public function getNom()
    {
        $this->__load();
        return parent::getNom();
    }

    public function setPrix($prix)
    {
        $this->__load();
        return parent::setPrix($prix);
    }

    public function getPrix()
    {
        $this->__load();
        return parent::getPrix();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setDateSortie($dateSortie)
    {
        $this->__load();
        return parent::setDateSortie($dateSortie);
    }

    public function getDateSortie()
    {
        $this->__load();
        return parent::getDateSortie();
    }

    public function setDateValidite($dateValidite)
    {
        $this->__load();
        return parent::setDateValidite($dateValidite);
    }

    public function getDateValidite()
    {
        $this->__load();
        return parent::getDateValidite();
    }

    public function setDateMaj($dateMaj)
    {
        $this->__load();
        return parent::setDateMaj($dateMaj);
    }

    public function getDateMaj()
    {
        $this->__load();
        return parent::getDateMaj();
    }

    public function setCreationDate($creationDate)
    {
        $this->__load();
        return parent::setCreationDate($creationDate);
    }

    public function getCreationDate()
    {
        $this->__load();
        return parent::getCreationDate();
    }

    public function setUpdateDate($updateDate)
    {
        $this->__load();
        return parent::setUpdateDate($updateDate);
    }

    public function getUpdateDate()
    {
        $this->__load();
        return parent::getUpdateDate();
    }

    public function addCategorie(\DMC\CategorieBundle\Entity\Categorie $categorie)
    {
        $this->__load();
        return parent::addCategorie($categorie);
    }

    public function getCategories()
    {
        $this->__load();
        return parent::getCategories();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'categories', 'id', 'nom', 'prix', 'type', 'date_sortie', 'date_validite', 'date_maj', 'creation_date', 'update_date');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}